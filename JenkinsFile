@Library('shared-library_301') _
node(label: 'master'){

//for git
def gitURL = "git@github.com:shruti-singh26/Spring-MySql-Docker.git"
def gitBranch = "master"

//for maven
def mvnHome = "maven"
def pom = "pom.xml"
def goal = "clean install"

//for sonar
def sonarqubeServer = "sonar"
def sonarqubeGoal = "clean verify sonar:sonar"

//for artifactory
def artifactoryServer = "JFrog-artifactory"
def releaseRepo = "shruti-123"
def snapshotRepo = "shruti-123"

//for devDeployment
def source = "./target/*.jar"
def dest = "/home/ubuntu"
def devid = credentials('DevEnvCred')
def user = "ubuntu"
def hosturl = "52.10.25.211"

//for docker
def ImageName = "petclinic"
def DockerRepo = "shrutisingh2/301"

//for kubernetes
def KubePath = "/var/lib/jenkins/KubeFiles"
def appFile = "app-deployment.yaml"

stage ("Git Checkout"){
	GitCheckOut "${gitURL}","${gitBranch}"
}

stage('Sonarqube Scanning'){
    sonarqubeScan "${mvnHome}","${sonarqubeGoal}","${pom}", "${sonarqubeServer}"
}

stage('Quality-Gate-check'){
   qualityGate "${sonarqubeServer}"
}

stage('Maven Build and Push to JFrog'){
     mavenBuild "${artifactoryServer}","${mvnHome}","${pom}", "${goal}", "${releaseRepo}", "${snapshotRepo}"
}

stage ("Deploy in Dev"){   
     withCredentials([string(credentialsId:'DevEnvCred', variable: 'host')]) {
            sh "scp ./target/*.jar ${host}:${dest}"
     hosturl = "${host}"
     }
}

stage ("Run in Dev"){   
    sh "ssh -tt ${hosturl} fuser -k 8080/tcp "
    sleep 10
    sh "ssh ${hosturl} nohup java -jar *.jar &" 
}

stage ("Approval"){
     input "Ready to go?"
}

stage ("Docker build & push to dockerhub"){
	 dockerBuildPush "${ImageName}","${DockerRepo}","${BUILD_NUMBER}"
}

stage ("Apply to Kubernetes"){
    sh "sed -i 's/:${ImageName}-\\([0-9][0-9]\\)/:${ImageName}-${BUILD_NUMBER}/g' ${KubePath}/${appFile}"
    sh "kubectl apply -f ${KubePath}/${appFile}"    
}
}